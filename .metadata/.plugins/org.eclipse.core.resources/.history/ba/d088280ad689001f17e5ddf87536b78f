package com.ust.digital_wallet.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ust.digital_wallet.entity.Documents;
import com.ust.digital_wallet.entity.User;
import com.ust.digital_wallet.repository.UserRepository;

@RestController
@RequestMapping("/wallet")
public class WalletController {
    
    @Autowired
    private UserRepository userRepo;

    // Get all users
    @GetMapping("/getEverything")
    public List<User> getAllUsers() {
        return userRepo.findAll();
    }

    // Get user by phone number
    @GetMapping("/{phone}")
    public ResponseEntity<User> getUserByPhone(@PathVariable Long phone) {
        Optional<User> userOptional = userRepo.findById(phone);
        return userOptional.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Add new user with associated documents
    @PostMapping("/addUser")
    public ResponseEntity<User> addNewUser(@RequestBody User newUser) {
        // Save user with associated documents
        User savedUser = userRepo.save(newUser);
        return ResponseEntity.ok(savedUser);
    }

    // Get a document by user phone and document type
    @GetMapping("/{phone}/document/{docType}")
    public ResponseEntity<Documents> getDocumentByType(@PathVariable Long phone, @PathVariable String docType) {
        Optional<User> userOptional = userRepo.findById(phone);
        if (userOptional.isPresent()) {
            List<Documents> documents = userOptional.get().getDocuments();
            for (Documents doc : documents) {
                if (doc.getDocType().equalsIgnoreCase(docType)) {
                    return ResponseEntity.ok(doc);  // Return the matching document
                }
            }
            return ResponseEntity.notFound().build();  // Return 404 if no matching document
        }
        return ResponseEntity.notFound().build();  // Return 404 if user not found
    }
}
